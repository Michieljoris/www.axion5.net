#+TITLE: Installing and using Clojure and ClojureScript with Emacs
#+OPTIONS: toc:t num:t
: comments: true
: published: true
: title: Installing and using Clojure and ClojureScript with Emacs
: tags: Emacs Clojure ClojureScript install

Clojure is wonderful, being able to use ClojureScript in the browser even more so, however setting up a development environment is a pain in the ass. On top of this what's considered best practice is still changing from almost month to month.

Because of this I intend to document here as accurately as I can the process for getting a working environment in Emacs for both Clojure and ClojureScript. This is going to be a working document where I will update the procedure I use myself on an ongoing basis. In general I will be noting instructions to install the most recent verions of software and scripts. Mostly this is a description of how, not so much of why, but I'll try to include links to more info where relevant.

: -------------

Much of the following is freely copied and modified from other tutorials on the net. A list of resources is at the bottom of the page. 

** Quick setup
 
I've made a [[https://github.com/Michieljoris/mjstarter][template]] that sets up what's discussed below with as little effort as possible.

First install Clojure and Leiningen as described below. 

Create a new app from the template:
: lein new mjstarter foobar

Start the figwheel and nrepl server:
: cd foobar
: lein cooper

Alternatively start up figwheel separately: =lein figwheel= and =lein repl=.

Give it a minute.

Add the following function to Emacs:
#+BEGIN_SRC 
(defun mjstarter ()
  "Cider-connect to localhost:15123 and start weasel repl"
  (interactive)
  (cider-connect "localhost" 15123)
  (cider-insert-in-repl "(require 'mjstarter.core) (mjstarter.core/weasel)" t))
#+END_SRC 

So then:
: M-x mjstarter

Then navigate in a browser to [[http://localhost:3449/index.html]]

To use a separate server for the app, uncomment line 21 in src-cljs/[project-name]/core.cljs:
: ;; :websocket-url "ws://{{figwheel-host}}:{{figwheel-port}}/figwheel-ws" 

Then start a server in =resources/public=.

** Clojure
   
 Clojure needs Java installed. So =java -version= should return something like:
: java version "1.8.0_11"
: Java(TM) SE Runtime Environment (build 1.8.0_11-b12)
: Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)

Minimum required version is 1.6, see [[http://clojure.org/getting_started?responseToken%3Ddfb93f0a2a572fc0c51e2373226b731e][here]]. 

In a freshly installed ubuntu 14.4 :

: sudo apt-get update 
: # to make sure apt-add-repository is installed:
: sudo apt-get install software-properties-common 
: sudo add-apt-repository ppa:webupd8team/java
: sudo apt-get update
: sudo apt-get install oracle-java8-installer 

You do not need to install Clojure as such, it's just a [[http://central.maven.org/maven2/org/clojure/clojure/1.6.0/][jar]] file. To take care of compiling Clojure programs and general project management there is [[http://leiningen.org/][leiningen]].

** Leiningen

From [[http://en.wikipedia.org/wiki/Leiningen_(software)][wikipedia]] :

#+begin_quote

Leiningen is a build automation and dependency management tool for the simple
configuration of software projects written in the Clojure programming language.

Leiningen's features can be extended via a plugin system, and it is supplied
with a command line interface that can initiate a number of actions, which
include:

+ The generation of a simple Clojure project skeleton
+ Packaging of project code and dependencies into an 'Uberjar' .jar file
+ Start an interactive REPL that has the classpath correctly set to load project
  dependencies
+ Ahead-of-time (AOT) compilation,
+ Dependency resolution (with automatic library downloading)
  
#+end_quote

And of course it runs your Clojure program if it's not a library. However, running a Clojure program involves automatically booting up a JVM first. Since this can take a few seconds Clojure programs are more easily tested and developed using a repl in a JVM booted and kept running for this purpose. See further below. A repl enables an instant feedback loop to the developer.

To install Leiningen download the [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein][lein]] script 
: wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein 

Place it on your $PATH where your shell can find it (eg. ~/bin)
: sudo cp lein ~/bin

Set it to be executable 
: chmod a+x ~/bin/lein 

Run it and it will download the self-install package
: lein 
: > ....
: > Downloading Leiningen to /home/michieljoris/.lein/self-installs/leiningen-2.5.0-standalone.jar now...
: > ....

Following is a list of most used options:

#+begin_example
Leiningen is a tool for working with Clojure projects.
Several tasks are available:
version             Print version for Leiningen and the current JVM.
upgrade             Upgrade Leiningen to specified version or latest stable.
new                 Generate project scaffolding based on a template.
run                 Run a -main function with optional command-line arguments.
uberjar             Package up the project files and dependencies into a jar file.
repl                Start a repl session either with the current project or standalone.
search              Search remote maven repositories for matching jars.

clean               Remove all files from project's target-path.
deps                Download all dependencies.

Run `lein help $TASK` for details.

#+end_example


# change              Rewrite project.clj by applying a function.
# check               Check syntax and warn on reflection.
# classpath           Print the classpath of the current project.
# compile             Compile Clojure source into .class files.
# deploy              Build and deploy jar to remote repository.
# do                  Higher-order task to perform other tasks in succession.
# help                Display a list of tasks or help for a given task.
# install             Install the current project to the local repository.
# jar                 Package up all the project's files into a jar file.
# javac               Compile Java source files.
# plugin              DEPRECATED. Please use the :user profile instead.
# release             Perform :release-tasks.
# retest              Run only the test namespaces which failed last time around.
# show-profiles       List all available profiles or display one if given an argument.
# test                Run the project's tests.
# trampoline          Run a task without nesting the project's JVM inside Leiningen's.
# update-in           Perform arbitrary transformations on your project map.
# vcs                 Interact with the version control system.
# with-profile        Apply the given task with the profile(s) specified.

# pom                 Write a pom.xml file to disk for Maven interoperability.


# Global Options:
#   -o             Run a task offline.
#   -U             Run a task after forcing update of snapshots.
#   -h, --help     Print this help or help for a specific task.
#   -v, --version  Print Leiningen's version.

# See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
# mixed-source, templates, and copying.


Generate a simple Clojure project skeleton:

: lein new app some-app-name

#+begin_example
| .gitignore
| doc
| | intro.md
| LICENSE
| project.clj
| resources
| README.md
| src
| | some_app_name
| | | core.clj
| test
| | some_app_name
| | | core_test.clj
#+end_example

: cd some-app-name
: lein run

Lein will retrieve some dependencies as specified in project.clj, compile the project and then print:

: Hello, World!

Run it again:

: lein run

and it'll only have to start the jvm and compile and then prints the same.

Build a standalone jar:
: lein uberjar

And then run it with:
: java -jar target/uberjar/some-app-name-0.1.0-SNAPSHOT-standalone.jar 

Run a repl in the project:
: lein repl

And then at the prompt:
: some-app-name.core=> (-main)
: Hello, World!
: nil
: some-app-name.core=> (exit)
: Bye for now!

Search for a clojar with:
: lein search clojar-name

This will take some time the first time. 

A very useful tutorial on leiningen is [[https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md][here]]. Some interesting sections are [[https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#checkout-dependencies][checkouts]] (similar to npm link) and [[https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#profiles][profiles]].

Leiningen is configured by the project.clj file in your project directory. For an annotated reference of all of the options that may be set in a project.clj file see [[https://github.com/technomancy/leiningen/blob/stable/sample.project.clj][here.]] A sample project.clj follows as used in the rest of this post, uncomment the relevant sections as needed.

#+BEGIN_SRC clojure
(defproject sample-app "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url "http://www.eclipse.org/legal/epl-v10.html"}
  ;; Warns users of earlier versions of Leiningen. Set this if your project
  ;; relies on features only found in newer Leiningen versions.
  :min-lein-version "2.0.0"
  :dependencies [[org.clojure/clojure "1.6.0"]
                 [org.clojure/clojurescript "0.0-2371"]
                 [com.cemerick/piggieback "0.1.3"]
                 [weasel "0.4.2"]
                 [figwheel "0.1.5-SNAPSHOT"] 
                 ]
  ;; Plugins are code that runs in Leiningen itself and usually
  ;; provide new tasks or hooks.
  :plugins [
            [lein-cljsbuild "1.0.3"]
            [lein-figwheel "0.1.5-SNAPSHOT"]
            ;; [cider/cider-nrepl "0.8.0-SNAPSHOT"]
            ]

  ;; Profiles
  ;; Each active profile gets merged into the project map. The :dev
  ;; and :user profiles are active by default, but the latter should be
  ;; looked up in ~/.lein/profiles.clj rather than set in project.clj.
  ;; Use the with-profiles higher-order task to run a task with a
  ;; different set of active profiles.
  ;; See `lein help profiles` for a detailed explanation.
  ;; :profiles {:uberjar {:aot :all}}

  ;;; Entry Point
  ;; The -main function in this namespace will be run at launch
  ;; (either via `lein run` or from an uberjar). It should be variadic:
  ;;
  ;; (ns my.service.runner
  ;; (:gen-class))
  ;;
  ;; (defn -main
  ;; "Application entry point"
  ;; [& args]
  ;; (comment Do app initialization here))
  ;;
  ;; :main my.service.runner
  
  ;;; Filesystem Paths
  ;; If you'd rather use a different directory structure, you can set these.
  ;; Paths that contain "inputs" are string vectors, "outputs" are strings.
  :source-paths ["src"]
  ;; :java-source-paths ["src/main/java"] ; Java source is stored separately.
  ;; :test-paths ["test" "src/test/clojure"]
  ;; :resource-paths ["src/main/resource"] ; Non-code files included in classpath/jar.
  ;; All generated files will be placed in :target-path. In order to avoid
  ;; cross-profile contamination (for instance, uberjar classes interfering
  ;; with development), it's recommended to include %s in in your custom
  ;; :target-path, which will splice in names of the currently active profiles.
  ;; :target-path "target/%s/"
  ;; Directory in which to place AOT-compiled files. Including %s will
  ;; splice the :target-path into this value.
  ;; :compile-path "%s/classy-files"
  ;; Directory in which to extract native components from inside dependencies.
  ;; Including %s will splice the :target-path into this value. Note that this
  ;; is not where to *look* for existing native libraries; use :jvm-opts with
  ;; -Djava.library.path=... instead for that.
  ;; :native-path "%s/bits-n-stuff"
  ;; Directories under which `lein clean` removes files.
  ;; Specified by keyword or keyword-chain to get-in path in this defproject.
  ;; Both a single path and a collection of paths are accepted as each.
  ;; For example, if the other parts of project are like:
  ;; :target-path "target"
  ;; :compile-path "classes"
  ;; :foobar-paths ["foo" "bar"]
  ;; :baz-config {:qux-path "qux"}
  ;; :clean-targets below lets `lein clean` remove files under "target",
  ;; "classes", "foo", "bar", "qux", and "out".
  ;; By default, will protect paths outside the project root and within standard
  ;; lein source directories ("src", "test", "resources", "doc", "project.clj").
  ;; However, this protection can be overridden with metadata on the :clean-targets
  ;; vector - ^{:protect false}
  ;; :clean-targets [:target-path :compile-path :foobar-paths
  ;;                 [:baz-config :qux-path] "out"]
  ;; Workaround for http://dev.clojure.org/jira/browse/CLJ-322 by deleting
  ;; compilation artifacts for namespaces that come from dependencies.
  ;; :clean-non-project-classes true
  ;; Paths to include on the classpath from each project in the
  ;; checkouts/ directory. (See the FAQ in the Readme for more details
  ;; about checkout dependencies.) Set this to be a vector of
  ;; functions that take the target project as argument. Defaults to
  ;; [:source-paths :compile-path :resource-paths], but you could use
  ;; the following to share code from the test suite:
  ;; :checkout-deps-shares [:source-paths :test-paths
  ;;                        ~(fn [p] (str (:root p) "/lib/dev/*"))]

  
  ;; All generated files will be placed in :target-path. In order to avoid
  ;; cross-profile contamination (for instance, uberjar classes interfering
  ;; with development), it's recommended to include %s in in your custom
  ;; :target-path, which will splice in names of the currently active profiles.

  ;; Options to change the way the REPL behaves.
  :repl-options { ;; Specify the string to print when prompting for input.
                 ;; defaults to something like (fn [ns] (str *ns* "=> "))
                 :prompt (fn [ns] (str "your command for <" ns ">, master? " ))
                 ;; What to print when the repl session starts.
                 :welcome (println "Welcome to the magical world of the repl!")
                 ;; Specify the ns to start the REPL in (overrides :main in
                 ;; this case only)
                 :init-ns foo.bar
                 ;; This expression will run when first opening a REPL, in the
                 ;; namespace from :init-ns or :main if specified.
                 :init (println "here we are in" *ns*)
                 ;; Print stack traces on exceptions (highly recommended, but
                 ;; currently overwrites *1, *2, etc).
                 :caught clj-stacktrace.repl/pst+
                 ;; Skip's the default requires and printed help message.
                 :skip-default-init false
                 ;; Customize the socket the repl task listens on and
                 ;; attaches to.
                 :host "0.0.0.0"
                 :port 4001
                 ;;for more options see the sample project.clj
                 :nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}
  

  :figwheel {
             :http-server-root "public" ;; this will be in resources/
             :server-port 3449          ;; default

             ;; CSS reloading (optional)
             ;; :css-dirs has no default value 
             ;; if :css-dirs is set figwheel will detect css file changes and
             ;; send them to the browser
             :css-dirs ["resources/public/css"]

             ;; Server Ring Handler (optional)
             ;; if you want to embed a ring handler into the figwheel http-kit
             ;; server
             ;; :ring-handler example.server/handler 
             } 
  
  
  :cljsbuild {
              :builds [{
                        :id "dev"
                        ;; The path to the top-level ClojureScript source directory:
                        :source-paths ["src-cljs"]
                        ;; The standard ClojureScript compiler options:
                        ;; (See the ClojureScript compiler documentation for details.)
                        :compiler {
                                   ;; The path to the JavaScript file that will be output.
                                   ;; Defaults to "target/cljsbuild-main.js".
                                   :output-to "resources/public/js/main.js"
                                   ;; See
                                   ;; https://github.com/clojure/clojurescript/wiki/Source-maps
                                   ;; Sets the output directory for temporary
                                   ;; files used during compilation. Must be
                                   ;; unique among all :builds. Defaults to
                                   ;; "target/cljsbuild-compiler-X" (where X is
                                   ;; a unique integer).
                                   :output-dir "resources/public/js"
                                   ;; Defaults to :whitespace.
                                   ;; :source-map "resources/public/js/main.js.map"
                                   :source-map true
                                   ;; The optimization level. May be :whitespace, :simple, or :advanced.
                                   ;; :optimizations :whitespace
                                   ;; :optimizations :simple
                                   ;; :optimizations :advanced
                                   :optimizations :none
                                   
                                   ;; Configure externs files for external libraries.
                                   ;; Defaults to the empty vector [].
                                   ;; For this entry, and those below, you can find a very good explanation at:
                                   ;; http://lukevanderhart.com/2011/09/30/using-javascript-and-clojurescript.html
                                   ;; :externs ["jquery-externs.js"]
                                   ;; Adds dependencies on external libraries. Note that files in these directories will be
                                   ;; watched and a rebuild will occur if they are modified.
                                   ;; Defaults to the empty vector [].
                                   ;; :libs ["closure/library/third_party/closure"]
                                   ;; Adds dependencies on foreign libraries. Be sure that the url returns a HTTP Code 200
                                   ;; Defaults to the empty vector [].
                                   ;; :foreign-libs [{:file "http://example.com/remote.js"
                                   ;;                 :provides ["my.example"]}]
                                   ;; Prepends the contents of the given files to each output file.
                                   ;; Defaults to the empty vector [].
                                   ;; :preamble ["license.js"]
                                   ;; Configure the input and output languages for the closure library.
                                   ;; May be :ecmascript3, ecmascript5, or ecmascript5-strict.
                                   ;; Defaults to ecmascript3.
                                   ;; :language-in :ecmascript5
                                   ;; :language-out :ecmascript5
                                   ;; :pretty-print true
                                   }
                        }]
              }
  
  )

#+END_SRC

** ClojureScript
The preferred setup seems to be to compile ClojureScript by Clojure code in a Clojure/Leiningen project. 
   
To do this you add a task to Leiningen in your project.clj in your Clojure project created with:
: lein new app some-app-name

Add the following to dependencies:
: [org.clojure/clojurescript "0.0-2371"]

And this to plugins:
:  [lein-cljsbuild "1.0.3"]

And add the configuration for the task/plug as a root key:
#+BEGIN_SRC clojure
  :cljsbuild {
         :builds [{
                    :id "dev"
                    :source-paths ["src-cljs"]
                    :compiler {
                               :output-to "resources/public/js/main.js"
                               :output-dir "resources/public/js"
                               :source-map true
                               :optimizations :none
                               }
                 }]
              }
#+END_SRC

For more options and an example see the sample project.clj above or [[https://github.com/technomancy/leiningen/blob/stable/sample.project.clj][here]].

You can then compile all ClojureScript files in the [projectdir]/src-cljs by executing:
: lein cljsbuild once dev

If you want to recompile when .cljs files change then have Leiningen watch the source directories:
: lein cljsbuild auto dev

If there is only one build =dev= is optional.

Take note:
#+begin_quote 
 Source maps also work with :optimizations set to :none. In this case the :source-map value doesn't control file names. So long as the value is truth-y (cf. the leiningen example above), an individual source map file will be generated for every ClojureScript source file.

It's important to note there are some source map option restrictions when using an :optimizations setting other than :none. In these cases :output-to, :output-dir, and :source-map must all share the exact same parent directory.
#+end_quote 

Setting optimizations to something other than =:none= slows down compilation greatly. Also make sure =source-map= is set to true in this case, not a string. Compilation is quite fast in auto mode with recompiling in auto mode taking a fraction of a second when a file changes. 

** Emacs
Use [[https://github.com/clojure-emacs/cider][cider]] for Clojure programming, install using package manager.

To load the necessary info, otherwise package-install doesn't work: 
: M-x list-packages
or:
: M-x package-refresh-contents
  
Then:
: M-x package-install [RET] cider [RET]

Also make sure clojure-mode is installed:
: M-x package-install [RET] clojure-mode [RET]

** Clojure repl in Emacs
Cider needs nrepl installed for your project, so first, check version of cider:
: M-x cider-version
> CIDER 0.8.0-snapshot

Make sure that in ~/.lein/profiles.clj is the following:
: {:user {:plugins [[cider/cider-nrepl "0.8.0-SNAPSHOT"]]}}

or per project add to =project.clj=
: :plugins [[cider/cider-nrepl "0.8.0-SNAPSHOT"]]

and that the versions match. Snapshot should be in capitals here.

Open a file from your Clojure or ClojureScript project and start a repl with:
: M-x cider-jack-in

If you get the following error when starting the cider-jack-in repl:
: error in process filter: let: Symbol's value as variable is void: clojure--prettify-symbols-alist
: error in process filter: Symbol's value as variable is void: clojure--prettify-symbols-alist

add this to the Emacs init files;
: (defconst clojure--prettify-symbols-alist
:   '(("fn"  . ?λ)))

This shouldn't be because this is defined in clojure-mode.el however somehow it
isn't evaluated for me.

You can also start a repl in the project's directory (using bash) with:
: lein run
: nREPL server started on port 56155 on host 127.0.0.1 - nrepl://127.0.0.1:56155
: ....

, take note of host and port and then to connect to it in Emacs: 
: M-x cider-connect [RET] localhost [RET] 56155

Some cider keyboard shortcuts:
: C-c C-z to switch to the repl from a clj buffer:
: C-M-x to evaluate top form. Output goes to repl
: C-c M-n	Switch to namespace of the current buffer
: C-x C-e	Evaluate the expression immediately preceding point
: C-c C-k	Compile current buffer
: C-, to save and load buffer into repl (custom shortcut)
: C-c C-f	Evaluate the top level form under point and pretty-print the result in a popup buffer.
: C-c C-b	Interrupt any pending evaluations.
: C-c C-d d Display doc string for the symbol at point. If invoked with a prefix argument, or no symbol is found at point, prompt for a symbol.

In the repl:
: C-j	Open a new line and indent.
: C-c M-o	Clear the entire REPL buffer, leaving only a prompt.
: C-c C-o	Remove the output of the previous evaluation from the REPL buffer.
: C-c C-u	Kill all text from the prompt to the current point.
: C-c C-b C-c C-c	Interrupt any pending evaluations.
: C-up C-down	Goto to previous/next input in history.
: M-p M-n	Search the previous/next item in history using the current input as search pattern. If M-p/M-n is typed two times in a row, the second invocation uses the same search pattern (even if the current input has changed).
: M-s M-r	Search forward/reverse through command history with regex.
: C-c C-n C-c C-p	Move between the current and previous prompts in the REPL buffer. Pressing RET on a line with old input copies that line to the newest prompt.
: TAB	Complete symbol at point.
: C-c C-d d	Display doc string for the symbol at point. If invoked with a prefix argument, or no symbol is found at point, prompt for a symbol
: C-c M-n	Select a namespace and switch to it.

You can connect to multiple nREPL servers using M-x cider-jack-in multiple times. To close the current nREPL connection, use M-x nrepl-close. M-x cider-quit closes all connections. 

Many more shortcuts at the [[https://github.com/clojure-emacs/cider][cider]] site, as well as info on configuring cider.

** ClojureScript repl

Before explaining how to start a ClojureScript repl in Emacs it is instructional to see how it's done from the shell command line.

First off, a ClojureScript repl always builds on and is started in a Clojure repl. So first thing to do is to start a Clojure repl:
: lein repl

From here we can connect to a JavaScript execution environment. The Clojure and ClojureScript libraries come with support for a ClojureScript repl. From the ClojureScript [[https://github.com/clojure/clojurescript/wiki/The-REPL-and-Evaluation-Environments][wiki]]:
  
#+BEGIN_QUOTE
The basic usage of the (ClojureScript) REPL is always the same:
-    require cljs.repl
-    require the namespace which implements the desired evaluation environment
-    create a new evaluation environment
-    start the REPL with the created environment

Using the REPL will also feel the same in each environment; forms are entered, results are printed and side-effects happen where they make the most sense.
#+END_QUOTE  

So in practical terms, copy and paste the following into a Clojure repl:

#+BEGIN_SRC clojure
  (do (require '[cljs.repl :as repl])
      (require '[cljs.repl.rhino :as rhino]) ;; require the rhino implementation of IJavaScriptEnv
      (def env (rhino/repl-env)) ;; create a new environment
      (repl/repl env)) ;; start the REPL
#+END_SRC

This connects to a generic JavasScript environment namely Rhino.

If you want to connect to a browser's JavaScript runtime enter the followiing into a Lein repl:
#+BEGIN_SRC clojure
  ;; Execute in repl (started with lein repl):
  (do (require '[cljs.repl :as repl])
      (require '[cljs.repl.browser :as browser])
      (def env (browser/repl-env :port 8090)) ; <<< port 8090
      (repl/repl env)) ;;starts cljs repl and connects to browser 
#+END_SRC

This will open a cljs prompt, but it will not be responsive. What you've done in fact is start a server in the Clojure runtime that listens on port 8090. You will need a JavaScript runtime to connect to this and start interacting with this 'repl in a repl' and evaluate ClojureScript code (after it's compiled to JavaScript by cljs.repl).  

For this purpose, create a webpage, for example, index.html that contains the following html:
#+BEGIN_SRC html
<html>
  <head>
    <meta charset="UTF-8">
    <title>Browser-connected REPL</title>
  </head>
  <body>
    <div id="content">
      <script type="text/javascript" src="out/goog/base.js"></script>
      <script type="text/javascript" src="js/main.js"></script>
      <script type="text/javascript">
        goog.require('foo');
      </script>
    </div>
  </body>
</html>
#+END_SRC

Leave out the =out/goog/base.js= script tag if you've set optimizations to anything other than =:none=.

Then create a ClojureScript file in "src-cljs/sample-app/core.cljs" like so:
#+BEGIN_SRC clojure
  ;;This runs in the browser (as javascript):
  (ns sample-app.core
    (:require [clojure.browser.repl :as repl]))
  ;; This connects to the repl server started in the lein repl:
  (repl/connect "http://localhost:8090/repl") ; <<< port 8090
#+END_SRC  

And make sure the project gets compiled:
: lein cljsbuild auto dev

This will produce a main.js file in the "www/js" directory in your project, which will be loaded and evaluated by the browser when it loads index.html. So refresh the page if it's opened already.

Now the ClojureScript repl should be responsive and able to evaluate ClojureScript code in the browser's JavaScript environment. Try:
: (. js/console (log "Hello!!!"))

** ClojureScript repl in Emacs: piggieback, Austin and weasel
   
The whole process described in the previous section does not work in Emacs since the "ClojureScript REPL requires/assumes that it is running in a terminal environment". [[https://github.com/cemerick/piggieback][Piggieback]] to the rescue! Check out its docs for more info on why it's needed in Emacs/nREPL sessions and what it does to enable the ClojureScript repl on top of nREPL.

.   
*** Piggieback

To use piggieback we only need to add one more dependency to our project:
: [com.cemerick/piggieback "0.1.3"]

and add an option to the root key =:repl-options= in project.clj
: :repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}

To start a Rhino ClojureScript in Emacs after doing =cider-jack-in= (which starts the nREPL) enter this into the repl:
: (cemerick.piggieback/cljs-repl)

This should get you a cljs prompt.

If instead you enter the following into the Emacs nREPL:
#+BEGIN_SRC clojure
(require 'cljs.repl.browser)
(cemerick.piggieback/cljs-repl
  :repl-env (cljs.repl.browser/repl-env :port 8090))
#+END_SRC

and you refresh or open a browser with the same index.html as above that loads the same ClojureScript code as above you will again be connected to the browser's JavaScript runtime, but now from an nREPL session. Make sure to access index.html through a server, not through the file system.

*** Austin
Ignore the suggestion in the piggieback docs to use [[https://github.com/cemerick/austin][Austin]] instead. It does build on piggieback and adds features but also ties in a Clojure server. It's easier to just start with plain piggieback first. Austin hopelessly confused me at first.

Austin starts two servers within a Clojure nREPL session. One to serve the index.html file and one to (reverse-) serve the ClojureScript repl for the browser to connect to. Because they share the same Clojure repl environment the html server can insert the same port and session number into the index.html file as the port and session that the repl server is configured with. They just share an atom. These port and session numbers are randomly chosen. This way you can of course start multiple sessions and repls and they won't clash. You also don't have to manually setup and choose the port number of the repl server and then insert it into the ClojureScript loaded in the index.html file.

*** Weasel
The third option for enabling a ClojureScript repl that connects to a browser within an nREPL session is to use [[https://github.com/tomjakubowski/weasel][weasel]]. Weasel does not use long polling (like piggieback and Austin) to connect from the browser to the ClojureScript repl server but websockets. It still needs piggieback though so leave the set up described for piggieback in place but add one more dependency to project.clj:
: [weasel "0.4.2"]

Start a ClojureScript repl by entering the following into a Clojure nREPL session (such as created for example by =cider-jack-in= in Emacs):
#+BEGIN_SRC clojure
  (require 'weasel.repl.websocket)
  (cemerick.piggieback/cljs-repl
   :repl-env (weasel.repl.websocket/repl-env
              :ip "0.0.0.0" :port 8092))
#+END_SRC

This will not work because the ClojureScript loaded by the index.html file needs to be a bit modified:
#+BEGIN_SRC clojure
(ns my.cljs.core
  (:require [weasel.repl :as ws-repl]))

(ws-repl/connect "ws://localhost:8092")

#+END_SRC

Alternatively:
#+BEGIN_SRC clojure
(ns my.cljs.core
  (:require [weasel.repl :as ws-repl]))

(ws-repl/connect "ws://localhost:8092"
   :verbose true
   :print #{:repl :console}
   :on-error #(print "Error! " %))
#+END_SRC

Explanation of the options:
#+BEGIN_EXAMPLE
verbose ; boolean, defaults to true
:print ; :repl to print only to the repl,
       ; :console to print only to the console
       ; #{:repl :console} to print to both
       ; or any variadic function to handle printing differently.
       ; defaults to :repl
:on-open, :on-error, :on-close ; fns for handling websocket lifecycle events.
                               ; default for all is nil
#+END_EXAMPLE

Again, try:
: (. js/console (log "Hello!!!"))

** Figwheel
For more info see [[https://github.com/bhauman/lein-figwheel][figwheel]].
   
Add dependency to project.clj
: [figwheel "0.1.5-SNAPSHOT"] 

Add following to the plugins key:
: [lein-figwheel "0.1.5-SNAPSHOT"]

Add the figwheel configuration to project.clj:
#+BEGIN_SRC  clojure
:figwheel {
   :http-server-root "public" ;; this will be in resources/
   :server-port 3449          ;; default

   ;; CSS reloading (optional)
   ;; :css-dirs has no default value 
   ;; if :css-dirs is set figwheel will detect css file changes and
   ;; send them to the browser
   :css-dirs ["resources/public/css"]

   ;; Server Ring Handler (optional)
   ;; if you want to embed a ring handler into the figwheel http-kit
   ;; server
   ;; :ring-handler example.server/handler 
} 
#+END_SRC

Start figwheel in terminal:
: lein figwheel example

Modify src-cljs/sample-app/core.cljs:
#+BEGIN_SRC clojure
(ns sample-app.core
  (:require
   [figwheel.client :as fw :include-macros true]))

(enable-console-print!)

(fw/watch-and-reload
  :websocket-url "ws://localhost:3449/figwheel-ws" 
  :jsload-callback (fn [] (print "reloaded"))) ;; optional callback

(println "You can change this line an see the changes in the dev console")

#+END_SRC

Start a server in resources/public and open index.html in your browser through the server.

** Paredit
When editing Clojure in Emacs use paredit. Some shortcuts:
: M-(	paredit-wrap-round, surround expression after point in parentheses
: C-→	Slurp; move closing parenthesis to the right to include next expression
: C-←	Barf; move closing parenthesis to the left to exclude last expression
: C-M-f, C-M-b	Move to the opening/closing parenthesis

** Links
*** Books
Two books I've found useful:    
+ [[http://www.amazon.com/Clojure-Programming-Chas-Emerick/dp/1449394701/ref%3Dsr_1_1/186-5337347-5323310?ie%3DUTF8&qid%3D1414693506&sr%3D8-1&keywords%3Dclojure][Clojure Programming]]
+ [[http://www.amazon.com/Programming-Clojure-Stuart-Halloway/dp/1934356867/ref%3Dsr_1_4/186-5337347-5323310?ie%3DUTF8&qid%3D1414693506&sr%3D8-4&keywords%3Dclojure][Programming Clojure]]
There's also a book on ClojureScript:
+ [[http://www.amazon.com/ClojureScript-Up-Running-Stuart-Sierra/dp/1449327435/ref%3Dsr_1_1/186-5337347-5323310?ie%3DUTF8&qid%3D1414693967&sr%3D8-1&keywords%3Dclojurescript][ClojureScript Up and Running]]
  
*** General web tutorials and docs on Clojure:
+ http://learnxinyminutes.com/docs/clojure/ | Learn clojure in Y Minutes
+ http://www.braveclojure.com/ | Learn to Program the World's Most Bodacious Language with Clojure for the Brave and True
+ http://java.ociweb.com/mark/clojure/article.html | Clojure - Functional Programming for the JVM
+ http://clojuredocs.org/quickref | Clojure Quick Reference | ClojureDocs - Community-Powered Clojure Documentation and Examples
+ https://github.com/clojure/clojurescript | clojure/clojurescript · GitHub
  
*** Leiningen  
+ http://leiningen.org/ | Leiningen
+ https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md | leiningen/TUTORIAL.md at stable · technomancy/leiningen · GitHub
+ https://github.com/emezeske/lein-cljsbuild | emezeske/lein-cljsbuild · GitHub
+ https://github.com/technomancy/leiningen/wiki/Faster | Faster startup time
*** Emacs
+ http://clojure-doc.org/articles/tutorials/emacs.html 
*** Repl 
+ https://github.com/clojure-emacs/cider  | Clojure environment for Emacs
+ https://github.com/clojure/clojurescript/wiki/The-REPL-and-Evaluation-Environments | The REPL and Evaluation Environments · clojure/clojurescript Wiki · GitHub
+ https://github.com/cemerick/piggieback | cemerick/piggieback · GitHub
+ https://github.com/cemerick/austin#project-repls | cemerick/austin · GitHub
+ https://github.com/tomjakubowski/weasel | tomjakubowski/weasel · GitHub
*** Other  
+ https://github.com/bhauman/lein-figwheel | bhauman/lein-figwheel · GitHub
+ http://rigsomelight.com/2014/05/01/interactive-programming-flappy-bird-clojurescript.html | Interactive Programming in ClojureScript

*** React  
+ http://facebook.github.io/react/ | A JavaScript library for building user interfaces | React
+ https://github.com/swannodette/om | swannodette/om · GitHub
+ http://clojure-doc.org/articles/tutorials/emacs.html | Clojure with Emacs | Clojure Documentation | Clojure Docs
+ https://github.com/holmsand/reagent | holmsand/reagent · GitHub
+ https://github.com/levand/quiescent | levand/quiescent · GitHub
+ http://blog.michielborkent.nl/blog/2014/09/25/figwheel-keep-Om-turning/
  
*** Starter projects:    
+ https://github.com/plexus/chestnut | plexus/chestnut · GitHub
+ http://blog.michielborkent.nl/blog/2014/09/25/figwheel-keep-Om-turning/ | Figwheel Keep Om Turning! - Through the cracks of immutability
  

    
    
    
