#+OPTIONS: toc:0
#+My github

There are basically 4 projects spread over multiple repos and a bunch of separate
repos:

- adea
- bb-server stack
- roster
- aum

First three projects are from 2013/2014 built mainly with nodejs and couchdb
(probably outdated somewhat now), last one (aum) is a full stack clojure library
building on and extending [[https://github.com/omcljs/om/wiki/Documentation-(om.next)][om.next]].

Adea is more of an idea, with some implementation. Relevant repos are: [[https://github.com/Michieljoris/cape][cape]]
(main repo), [[https://github.com/michieljoris/authpages][authpages]] (demonstration of signup/forgotpwd/resetpwd/confirm using
couchdb and cape as backend), [[https://github.com/Michieljoris/deploy-demo][deploy-demo]] (visualisation of adea deploy
algorithm), [[https://github.com/Michieljoris/node-haproxy][node-haproxy]] (control haproxy from node with hot reload) and
[[https://github.com/Michieljoris/docker-rcouch][docker-rcouch]]. See [[http://www.axion5.net/post/adea-an-experiment-in-application-back-end-infrastructure.html][adea]] blog post for more info.

The blog on this site is actually put together using the [[https://github.com/Michieljoris/bb-server][bb-server]] stack. See
[[/my-github.html#header-0-0-1][summary of repos]] and the blog entry [[http://www.axion5.net/post/my-webstack.html][my-webstack]]. This blog is hosted on github
pages, the site itself is generated by [[https://github.com/Michieljoris/bb-blog][bb-blog]].

On the [[http://www.axion5.net/projects.html][projects]] page there is some info on the roster app project, and see [[/my-github.html#header-0-0-2][here]]
for summary of repos . Again, grand plans, but at least there was a working
roster app.

Over the years I added miscellaneous repos such as [[https://github.com/Michieljoris/teocs][answers to TEOCS]] and a [[https://github.com/Michieljoris/mal][Make A
Lisp]] (in javascript), see [[/my-github-repos.html#header-0-0-3][here]] for more repos.

Most of the above repos are from 2015 and earlier. In the beginning of 2015 I
got a job at [[https://digitalechecklisten.nl/][DigitaleChecklisten]] and most of my programming energy went into
working on their mysql/rails/ember stack. There was no accompanying admin app
but I got the chance to build this in clojure from 2016 onwards. This is a full
stack app built from basic building blocks such as mysql, ring and om-next. A
lot for it had to be built still such as database validation, backend and
frontend parser, test framework, build scripts etc. I extracted the generic parts and bundled
them in [[https://github.com/Michieljoris/pagora.aum][aum]] and a few accompanying repos. See [[/my-github.html#header-0-0-4][here]] for a summary of them.

Playing around with devops a bit in [[https://github.com/Michieljoris/demo][demo]] (One line deploy of branch to
branch.somedomain.com by using git push, ala dokku) and [[https://github.com/Michieljoris/mystack][mystack]], a work in
progress using the hashicorp tools to set up a cloud infrastructure.

-----

*** Bb-server stack, my own nodejs web stack and blog engine
To learn javascript and node I put together as best as I could a complete stack, from a nodejs server, to a template engine.

A summary of the relevant github repos:

**** [[https://github.com/Michieljoris/bootstrapjs][bootstrapjs]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2012
#+END_EXAMPLE

"Organise javascript code in modules with automatic dependency resolution a la require.js."

This was before ES6 modules were around. I kinda liked javascript, well, the
good parts, but the frontend was really missing some kind of module system. I
rolled my own which was very instructional. Used in a few later projects.

**** [[https://github.com/Michieljoris/bb-server][bb-server]]
#+BEGIN_EXAMPLE
Tech: javascript, nodejs Year: 2013
#+END_EXAMPLE

  "Simple bare bones http server. With clothes on now though..",

  Some clothes:

    - Caching of all static resources, in memory (LRU) and on disk.
    - Transpiling, minifying and compressing of these assets on the fly, combine this with caching and only modified assets will be transformed on a request.
    - Prerendering. A phantomjs rendered version of a page will be served if page comes with a query for an escaped fragment. These are also cached then.
    - Can serves a single page application
    - Start a websocket and/or a https server alongside your http server
    - Add message and close handlers for the websocket server
    - Inject scripts into browser
    - Option to inject reload script will refresh the browser on reload msg.
    - Support for sessions (mostly copied from sessions npm module)
    - You can plugin your own GET and POST handlers triggered by route.
    - Deals with favicon.ico requests
    - Customized logging of all requests to a log file
    - Cache busting by automatically removing stamps
    - Standard server features such as setting cache headers and giving a 304 response to a if- not- modified- since header.
    - Most options can be set on the command line, all of them using a json configuration file.
    - Wrapping of js files from a modules directory to denodify them.
    - Implementation of server side of persona. Example angular version of client side included.

**** [[https://github.com/Michieljoris/cachejs][cachejs]]
#+BEGIN_EXAMPLE
Tech: javascript year: 2013
#+END_EXAMPLE

"Implementation of async LRU and ARC cache.",

Plus some intuitions on how the ARC cache works in the readme. Used in
bb-server.

**** [[https://github.com/Michieljoris/html-builder][html-builder]]
#+BEGIN_EXAMPLE
Tech: javascript, logthis, bootstrapjs. Year: 2013
#+END_EXAMPLE

"Don't write html, use a layout and and populate it with partials."

Basically a static site builder, also see next few entries.

#+BEGIN_EXAMPLE
javascript, 2012
#+END_EXAMPLE
**** [[https://github.com/Michieljoris/recaster][recaster]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2013
#+END_EXAMPLE

  "Wrapper for miscellaneous transpilers, minifiers and compressors.",

**** [[https://github.com/Michieljoris/denodify][denodify]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

"Organize javascript on the browser using the nodejs module system.",

Like browserify, but a bit simpler.

**** [[https://github.com/Michieljoris/denodify-core][denodify-core]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

  "Nodejs core modules adapted for denodify",

**** [[https://github.com/Michieljoris/monad][vow.js]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 203
#+END_EXAMPLE

  "Douglas Crockford's vow.js wrapped up in a node module",

  This module is still on [[https://www.npmjs.com/package/dougs_vow][npmjs]] together with bb-server and some other ones.
  They also seem to get some traffic, but not sure if that's just noise.

**** [[https://github.com/Michieljoris/logthis][logthis]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2012
#+END_EXAMPLE

"A little namespaced logging utility for node and the browser."

**** [[https://github.com/Michieljoris/js-project][Scaffold using previous repos]]
#+BEGIN_EXAMPLE
Tech: javascript, bb-server, denodify, logthis, html-builder etc Year: 2014
#+END_EXAMPLE

  "Scaffold for a new node or website project using html-builder, bb-server etc",

**** [[https://github.com/Michieljoris/bb-blog][bb-blog]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

  "Bare bones blog for bb-server",

**** [[https://github.com/Michieljoris/seo_laundry][seo_laundry]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2013
#+END_EXAMPLE

  "Server based creator of html cleansed of js by phantomjs",

**** [[https://github.com/Michieljoris/url-washer][url-washer]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2013
#+END_EXAMPLE

"Pass in an url and get back the html cleansed of js..",

**** [[https://github.com/Michieljoris/phantom-sitemap][phantom-sitemap",]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2014
#+END_EXAMPLE

"Crawls a site, extracts the links and returns the promise of either a sitemap or just a list of links"

**** [[https://github.com/Michieljoris/blog-example][bb-blog-example]]
#+BEGIN_EXAMPLE
Tech: javascript, bb-server stack Year: 2014
#+END_EXAMPLE

  "Blog generated and served with bb-blog, bb-server and html-builder",

**** [[https://github.com/Michieljoris/www.axion5.net][www.axion5.net]]
#+BEGIN_EXAMPLE
Tech: javascript, bb-server stack Year: 2014
#+END_EXAMPLE

  "Repo of my personal site. Includes all posts and pages.",

**** [[https://github.com/Michieljoris/firstdoor][Website built using bb-server stack: firstdoor]]
#+BEGIN_EXAMPLE
Tech: bb-server and co, angular, bootstrap. Year: 2013
#+END_EXAMPLE

  "Website using angular and bootstrap",

  Website built for a client with a newly started business, using my
  bb-server/html-builder stack. They used it in production for a couple of
  years.

**** [[https://github.com/Michieljoris/personalinfo][Idea for an app: personalinfo]]
#+BEGIN_EXAMPLE
Tech: bb-server stack Year 2013
#+END_EXAMPLE

Idea for an app: A tool for families to share detailed information about
their family member with a disability:

https://github.com/Michieljoris/personalinfo/blob/master/docofpersonalinfo.pdf

Would need to be rather secure and privacy aware. Perhaps with controls to share
only parts to selected accounts.

**** [[https://github.com/Michieljoris/dbeditor][Dropbox file editor: dbeditor]]
#+BEGIN_EXAMPLE
Tech: javascript, bb-server stack.dropbox api Year: 2013
#+END_EXAMPLE

"Edit files in dropbox with a markdown or wysiwyg editor"

This site allows you to connect to your dropbox, browse the contents and then
edit text files using a markdown or wysiwyg editor.

Probably obsolete now.

*** Roster, couchDB repos
**** [[https://github.com/Michieljoris/validate_doc_update][validate_doc_update]]
#+BEGIN_EXAMPLE
Tech: javascript, CouchDB Year: 2013
#+END_EXAMPLE

  "Automated couchdb document validator. "

 Has a little DSL + parser to get more flexible validation in CouchDB. Instead
 of pushing js to a database design doc to update the validation a standard
 script is loaded there. Then, by kinda abusing members.names and user roles you
 can set what kind of docs are allowed and who is allowed to write them when.
 Idea is that you encode these things in the role strings themselves and that
 the validate script parses and interpretes them. Used in some other CouchDB
 projects.

**** [[https://github.com/Michieljoris/vouchdb][vouchdb]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2014
#+END_EXAMPLE

"Use the same promise based api for CouchDB and PouchDB, on nodejs and in the browser.",

wip

**** [[https://github.com/Michieljoris/quilt][quilt]]
#+BEGIN_EXAMPLE
Tech: javascript, CouchDB, Angular Year: 2013
#+END_EXAMPLE

  "Opiniated CouchDB manager, similar to Futon."

**** Roster app
***** [[https://github.com/Michieljoris/roster][roster]]
#+BEGIN_EXAMPLE
Tech: javascript,CouchDB,PouchDB, SmartClient, bootstrapjs. Year: 2012
#+END_EXAMPLE

"Web based database management framework. Plug in custom views and editors,
at the moment a roster and shift management software."

At the time I was doing some shiftwork and the system of managing time sheets
was rather cumbersome. I put a spreadsheet together first which was adopted and
then this app was also adopted to some degree.

***** [[https://github.com/Michieljoris/roster_help][roster_help]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2013
#+END_EXAMPLE

  "Separate site documenting the roster app.",

  https://github.com/Michieljoris/roster_help/blob/master/build/markdown/security.md

  Mainly a long blurb about why and how I think the set up of CouchDB for the roster app is secure.

***** [[https://github.com/Michieljoris/shift-calendar][shift-calendar]]
#+BEGIN_EXAMPLE
Tech: javascript Year:2014
#+END_EXAMPLE

  "Replacement calendar for the one in roster",

*** Misc repos
**** [[https://github.com/Michieljoris/teocs][My answers for The Elements of Computing Systems",]]
#+BEGIN_EXAMPLE
Tech: Common Lisp Year: 2012
#+END_EXAMPLE

See https://www.amazon.com.au/Elements-Computing-Systems-Building-Principles/dp/0262640686

From a review of the book:
"You start with (software simulations of) basic logical circuits and use them to
build a CPU. Then you build an assembly language, a VM and a high level language
similar to Java"

Very instructive, and was fun to implement in CL. Also my first repo on github
it seems.

**** [[https://github.com/Michieljoris/picoscript][picoscript]]
#+BEGIN_EXAMPLE
Tech: picolisp, javascript Year: 2012
#+END_EXAMPLE

"The beginning of a version of picolisp that translates to javascript."

Well, rather ambitious project. More of an idea. I did like [[https://picolisp.com/wiki/?home][picolisp]].

**** [[https://github.com/Michieljoris/sicp][sicp]]
#+BEGIN_EXAMPLE
Tech: Scheme Year: 2012
#+END_EXAMPLE

"Some answers for SICP"

wip

**** [[https://github.com/Michieljoris/ThoughtWorks][ThoughtWorks]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

  "Solutions of tasks you apparently need to do when applying for a job at ThoughtWorks"

**** [[https://github.com/Michieljoris/improvfree][improvfree]]
#+BEGIN_EXAMPLE
Tech: keykit Year: 2006
#+END_EXAMPLE

  "An ear training tool written using keykit",

  I wrote it to practice ear training. I was dissatisfied with the ear training
  software going around at the time and combined the features of several. But
  not knowing java or javascript or any other language than c/c++, basic and
  pascal I found it hard to hook up to the midi hardware in the soundblaster
  cards. But keykit made it easy.

**** [[https://github.com/Michieljoris/trello-export][trello-export]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

**** [[https://github.com/Michieljoris/nonograms][nonograms]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2014
#+END_EXAMPLE

**** [[https://github.com/Michieljoris/mal][Make a lisp]]
#+BEGIN_EXAMPLE
Tech:javascript Year: 2015
#+END_EXAMPLE

  "Implementation of a lisp in javascript.",

**** [[https://github.com/Michieljoris/aid][Archeology Inspired Database wip]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2017
#+END_EXAMPLE

"Archeology inspired database",
**** [[https://github.com/Michieljoris/code-x][code-x]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

"Answers to exercises on codewars, codeeval and hackerrank"
**** [[https://github.com/Michieljoris/imageopti][imageopti]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2013
#+END_EXAMPLE

  "Wrapper for linux image utilities",

**** [[https://github.com/Michieljoris/firgilio][firgilio]]
#+BEGIN_EXAMPLE
Tech: javascript Year: 2014
#+END_EXAMPLE

   "Functional version of virgilio from icemobile",

**** [[https://github.com/Michieljoris/CV][CV]]
#+BEGIN_EXAMPLE
Tech: bash, latex, emacs Year: 2014
#+END_EXAMPLE

"Write emacs org cover letter, export to latex, then create pdf "

**** [[https://github.com/Michieljoris/directive_objectEditor][Angular: directive_objectEditor]]
#+BEGIN_EXAMPLE
Tech: javascript, Angular Year: 2013
#+END_EXAMPLE

"Visual javascript object inspector and editor as a Angularjs directive",

Played around with Angular for a bit, but in the end was not a fan.

*** Aum, clojure
**** [[https://github.com/Michieljoris/pagora.aum][pagora.aum]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2020
#+END_EXAMPLE

"Set of libs to build a full stack app in clojure"

**** [[https://github.com/Michieljoris/pagora.revolt][pagora.revolt]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2019
#+END_EXAMPLE

"plugins and tasks for [[https://github.com/mbuczko/revolt][revolt]]",

**** [[https://github.com/Michieljoris/pagora.clj-utils][pagora.clj-utils]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2020
#+END_EXAMPLE

"Set of generic clojure fns"
**** [[https://github.com/Michieljoris/aum-starter-app][aum-starter-app]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2020
#+END_EXAMPLE

"Minimal full stack starter app using Aum"

**** [[https://github.com/Michieljoris/tools-deps-poc][tools-deps-poc",]]
#+BEGIN_EXAMPLE
Tech: clojure, tools.deps Year: 2019
#+END_EXAMPLE

  "Proof of concept of tools.deps and revolt",

  Experimenting with tools.deps

**** [[https://github.com/Michieljoris/dj-consumer][dj-consumer]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2018
#+END_EXAMPLE

"Background jobs for clojure, modelled on Rails delayed jobs"


**** [[https://github.com/Michieljoris/boot-scripts][tail.boot]]
#+BEGIN_EXAMPLE
Tech: clojure Year: 2017
#+END_EXAMPLE

"Boot task: prints, tails and filters logs on the commandline. Works best with logstash logs. "
